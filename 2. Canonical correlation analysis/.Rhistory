#Canonical correlation analysis
mm=read.csv(file.choose(),header=T)
#Canonical correlation analysis
mm=read.csv("mmreg.csv")
setwd("G:/statiscis/M.Sc/1st Semister/5101 _ Advanced Multivariate Technique (Siddik Sir)/Assignment/R-code")
setwd("G:/statiscis/M.Sc/1st Semister/5101 _ Advanced Multivariate Technique (Siddik Sir)/Assignment/2. Canonical correlation analysis")
#Canonical correlation analysis
mm=read.csv("mmreg.csv")
colnames(mm)=c("Control", "Concept", "Motivation", "Read", "Write", "Math", "Science", "Sex")
colnames(mm)
view(mm)
View(mm)
head(mm)
#Descriptive statistics
summary(mm)
# Required pacakges
library (ggplot2)
library(GGally)
install.packages("GGally")
install.packages("GGally")
#install.packages("GGally")
library(GGally)
library(CCA)
install.packages("CCA")
#install.packages("CCA")
library(CCA)
# Data summary
xtabs(~Sex, data = mm)
psych = mm[,1:3]
acad = mm[,4:8]
ggpairs(psych)
# correlations
matcor(psych,acad)
cc1=cc(psych, acad)
#display the canonical correlations
cc1$cor
# compute canonical loadings
cc2=comput(psych, acad, cc1)
# display canonical loadings
cc2[3:6]
#tests of canonical dimensions
rho=cc1$cor
## Define number of observations, number of variables in first set, and number of variables in the second set.
n=dim(psych)[1]
p=length(psych)
q=length(acad)
## Calculate p-values using the F-approximations of different test statistics:
p.asym(rho, n, p, q, tstat = "Wilks")
p.asym(rho, n, p, q, tstat = "Hotelling")
p.asym(rho, n, p, q, tstat = "Pillai")
p.asym(rho, n, p, q, tstat = "Roy")
#install.packages("CCA")
library(CCA)
# Data summary
xtabs(~Sex, data = mm)
psych = mm[,1:3]
acad = mm[,4:8]
ggpairs(psych)
# correlations
matcor(psych,acad)
cc1=cc(psych, acad)
#display the canonical correlations
cc1$cor
# compute canonical loadings
cc2=comput(psych, acad, cc1)
# display canonical loadings
cc2[3:6]
#tests of canonical dimensions
rho=cc1$cor
## Define number of observations, number of variables in first set, and number of variables in the second set.
n=dim(psych)[1]
p=length(psych)
q=length(acad)
## Calculate p-values using the F-approximations of different test statistics:
p.asym(rho, n, p, q, tstat = "Wilks")
## Calculate p-values using the F-approximations of different test statistics:
library(CCA)
p.asym(rho, n, p, q, tstat = "Wilks")
p.asym(rho, n, p, q, tstat = "Hotelling")
p.asym(rho, n, p, q, tstat = "Pillai")
p.asym(rho, n, p, q, tstat = "Roy")
#install.packages("CCP")
library(CCA)
#install.packages("CCP")
library(CCP)
install.packages("CCP")
library(CCP)
#install.packages("CCP")
library(CCP)
# Data summary
xtabs(~Sex, data = mm)
psych = mm[,1:3]
acad = mm[,4:8]
ggpairs(psych)
# correlations
matcor(psych,acad)
cc1=cc(psych, acad)
#display the canonical correlations
cc1$cor
# compute canonical loadings
cc2=comput(psych, acad, cc1)
# display canonical loadings
cc2[3:6]
#tests of canonical dimensions
rho=cc1$cor
## Define number of observations, number of variables in first set, and number of variables in the second set.
n=dim(psych)[1]
p=length(psych)
q=length(acad)
## Calculate p-values using the F-approximations of different test statistics:
library(CCA)
p.asym(rho, n, p, q, tstat = "Wilks")
p.asym(rho, n, p, q, tstat = "Hotelling")
p.asym(rho, n, p, q, tstat = "Pillai")
p.asym(rho, n, p, q, tstat = "Roy")
# standardized psych canonical coefficients diagonal matrix of psych sd's
s1=diag(sqrt(diag(cov(psych))))
$1 %*% cc1$xcoef
# standardized acad canonical coefficients diagonal matrix of acad sd's
s2<=diag(sqrt(diag(cov(acad))))
s2 %*% cc1$ycoef
# standardized psych canonical coefficients diagonal matrix of psych sd's
s1=diag(sqrt(diag(cov(psych))))
s1 %*% cc1$xcoef
# standardized acad canonical coefficients diagonal matrix of acad sd's
s2<=diag(sqrt(diag(cov(acad))))
s2 %*% cc1$ycoef
# standardized acad canonical coefficients diagonal matrix of acad sd's
s2=diag(sqrt(diag(cov(acad))))
s2 %*% cc1$ycoef
#Canonical correlation analysis
mm=read.csv("mmreg.csv")
colnames(mm)=c("Control", "Concept", "Motivation", "Read", "Write", "Math", "Science", "Sex")
colnames(mm)
head(mm)
#Descriptive statistics
summary(mm)
# Required pacakges
library (ggplot2)
#install.packages("GGally")
library(GGally)
#install.packages("CCA")
library(CCA)
#install.packages("CCP")
library(CCP)
# Data summary
xtabs(~Sex, data = mm)
psych = mm[,1:3]
acad = mm[,4:8]
ggpairs(psych)
# correlations
matcor(psych,acad)
cc1=cc(psych, acad)
#display the canonical correlations
cc1$cor
# compute canonical loadings
cc2=comput(psych, acad, cc1)
# display canonical loadings
cc2[3:6]
#tests of canonical dimensions
rho=cc1$cor
## Define number of observations, number of variables in first set, and number of variables in the second set.
n=dim(psych)[1]
p=length(psych)
q=length(acad)
## Calculate p-values using the F-approximations of different test statistics:
library(CCA)
p.asym(rho, n, p, q, tstat = "Wilks")
p.asym(rho, n, p, q, tstat = "Hotelling")
p.asym(rho, n, p, q, tstat = "Pillai")
p.asym(rho, n, p, q, tstat = "Roy")
# standardized psych canonical coefficients diagonal matrix of psych sd's
s1=diag(sqrt(diag(cov(psych))))
s1 %*% cc1$xcoef
# standardized acad canonical coefficients diagonal matrix of acad sd's
s2=diag(sqrt(diag(cov(acad))))
s2 %*% cc1$ycoef
#Step 1. Load dataset
mm <- read.csv("mmreg.csv")
# Rename columns for clarity
colnames(mm) <- c("Control", "Concept", "Motivation", "Read", "Write", "Math", "Science", "Sex")
colnames(mm)
head(mm)
#Step 2. Descriptive statistics
summary(mm)
xtabs(~Sex, data = mm)  # frequency table for Sex
# 3. Load required packages
library(ggplot2)
#Step 3. Load required packages
library(ggplot2)
library(GGally)   # for ggpairs
library(CCA)      # Canonical Correlation Analysis
library(CCP)      # Significance testing of canonical correlations
#Step 4. Split dataset into psychological and academic variables
psych <- mm[, 1:3]  # locus_of_control, self_concept, motivation
acad  <- mm[, 4:8]  # read, write, math, science, sex
#Step 5. Exploratory data analysis
ggpairs(psych)  # pairwise plots for psychological variables
# 6. Compute correlation matrix between two sets
matcor(psych, acad)
# 7. Perform canonical correlation analysis
cc1 <- cc(psych, acad)
#Step 7. Perform canonical correlation analysis
cc1 <- cc(psych, acad)
# Display canonical correlations
cc1$cor
#Step 8. Compute canonical loadings
cc2 <- comput(psych, acad, cc1)
# Display canonical loadings (X & Y scores)
cc2[3:6]
#Step 9. Tests of canonical dimensions
rho <- cc1$cor
n   <- nrow(psych)   # number of observations
p   <- ncol(psych)   # number of variables in set 1
q   <- ncol(acad)    # number of variables in set 2
# Calculate p-values using different F-approximations
p.asym(rho, n, p, q, tstat = "Wilks")
p.asym(rho, n, p, q, tstat = "Hotelling")
p.asym(rho, n, p, q, tstat = "Pillai")
p.asym(rho, n, p, q, tstat = "Roy")
# 10. Standardized canonical coefficients
# Psychological variables
s1 <- diag(sqrt(diag(cov(psych))))
#Step 10. Standardized canonical coefficients
# Psychological variables
s1 <- diag(sqrt(diag(cov(psych))))
std_xcoef <- s1 %*% cc1$xcoef
std_xcoef
# Academic variables
s2 <- diag(sqrt(diag(cov(acad))))
std_ycoef <- s2 %*% cc1$ycoef
std_ycoef
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
mm <- read.csv("mmreg.csv")
# Rename columns for clarity
colnames(mm) <- c("Control", "Concept", "Motivation", "Read", "Write", "Math", "Science", "Sex")
colnames(mm)
head(mm)
# Chunk 3
summary(mm)
xtabs(~Sex, data = mm)  # frequency table for Sex
# Chunk 4
library(ggplot2)
library(GGally)   # for ggpairs
library(CCA)      # Canonical Correlation Analysis
library(CCP)      # Significance testing of canonical correlations
# Chunk 5
psych <- mm[, 1:3]  # locus_of_control, self_concept, motivation
acad  <- mm[, 4:8]  # read, write, math, science, sex
# Chunk 6
ggpairs(psych)  # pairwise plots for psychological variables
# Chunk 7
matcor(psych, acad)
# Chunk 8
cc1 <- cc(psych, acad)
# Display canonical correlations
cc1$cor
# Chunk 9
cc2 <- comput(psych, acad, cc1)
# Display canonical loadings (X & Y scores)
cc2[3:6]
# Chunk 10
rho <- cc1$cor
n   <- nrow(psych)   # number of observations
p   <- ncol(psych)   # number of variables in set 1
q   <- ncol(acad)    # number of variables in set 2
# Calculate p-values using different F-approximations
p.asym(rho, n, p, q, tstat = "Wilks")
p.asym(rho, n, p, q, tstat = "Hotelling")
p.asym(rho, n, p, q, tstat = "Pillai")
p.asym(rho, n, p, q, tstat = "Roy")
# Chunk 11
# Psychological variables
s1 <- diag(sqrt(diag(cov(psych))))
std_xcoef <- s1 %*% cc1$xcoef
std_xcoef
# Academic variables
s2 <- diag(sqrt(diag(cov(acad))))
std_ycoef <- s2 %*% cc1$ycoef
std_ycoef
#Load Required Libraries
# Install the 'psych' package if not already installed
if(!require(psych)) install.packages("psych", dependencies = TRUE)
library(psych)
#Factor Analysis on the Iris Dataset
# Load iris dataset
data(iris)
# View the first few rows
head(iris)
# Scale numeric variables (first 4 columns)
iris_scaled <- scale(iris[, 1:4])
# Determine the number of factors using factor analysis
# Using 4 factors and varimax rotation
fa_iris <- fa(r = iris_scaled,
nfactors = 4,
rotate = "varimax")
# Summarize results
summary(fa_iris)
# View factor loadings
fa_iris$loadings
# Optional: Factor analysis on a subset
subset1 <- subset(iris[, 1:4], iris$Sepal.Length < mean(iris$Sepal.Length))
fa_subset <- fa(subset1, nfactors = 4, rotate = "varimax")
print(fa_subset)
# Factor Analysis on the mtcars Dataset
# Load mtcars dataset
data(mtcars)
# Perform factor analysis using 'factanal' with 3 factors and varimax rotation
factor_analysis_mtcars <- factanal(x = mtcars,
factors = 3,
rotation = "varimax")
# Print results
print(factor_analysis_mtcars)
# Notes:
# Notes:
# factanal() arguments:
# Notes:
# factanal() arguments:
#   x        : numeric data matrix or data frame
# Notes:
# factanal() arguments:
#   x        : numeric data matrix or data frame
#   factors  : number of factors to extract
# Notes:
# factanal() arguments:
#   x        : numeric data matrix or data frame
#   factors  : number of factors to extract
#   rotation : rotation method (e.g., "varimax", "promax")
